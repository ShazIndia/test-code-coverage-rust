name: Rust-APP-Test-Coverage

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Install dependencies
      run: sudo apt-get install -y jq bc

    - name: Run tests and generate coverage report
      run: |
        cargo llvm-cov clean --workspace
        cargo llvm-cov --json --output-path=coverage.json

    - name: Check coverage
      id: coverage-check
      run: |
        COVERAGE=$(jq '.data[0].totals.lines.pct' < coverage.json)
        echo "Coverage is $COVERAGE%"
        if (( $(echo "$COVERAGE < 50" | bc -l) )); then
          echo "Code coverage is below 50%"
          exit 1
        fi
    - name: Parse line coverage
      id: line_coverage
      run: |
        LINE_COVERAGE=$(jq '.data[0].totals.lines.percent' < coverage.json)
        echo "Line coverage is ${LINE_COVERAGE}%"
        echo "line_coverage=${LINE_COVERAGE}"

    - name: Parse branch coverage
      id: branch_coverage
      run: |
        BRANCH_COVERAGE=$(jq '.data[0].totals.branches.percent' < coverage.json)
        echo "Branch coverage is ${BRANCH_COVERAGE}%"
        echo "branch_coverage=${BRANCH_COVERAGE}" 

    - name: Parse function coverage
      id: function_coverage
      run: |
        FUNCTION_COVERAGE=$(jq '.data[0].totals.functions.percent' < coverage.json)
        echo "Function coverage is ${FUNCTION_COVERAGE}%"
        echo "function_coverage=${FUNCTION_COVERAGE}"
